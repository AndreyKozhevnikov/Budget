using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DevExpress.Xpf.Mvvm;
using System.Windows.Input;
using System.Collections.ObjectModel;
using System.Data;
using System.Windows.Markup;
using System.Windows.Data;
using DevExpress.Xpf.Editors;
using System.Diagnostics;
using System.Windows.Media;
using System.Windows;


namespace Budget {
    public class OrderViewModel : MyBindableBase {
        public static BudgetEntities1 generalEntity;
        
        
        
        public OrderViewModel() {
            ConnectToDataBase();
          //  CreateGroupCollection();


            DateCollection = new ObservableCollection<DayData>();


            UpdateTags(); //+
            UpdateOrders(); //+

            MakeLists();//+
          

      
            CreateNewCurrentOrder();//
            CurrentDate = DateTime.Today;
            SetFocusOnTextEditValue();
            //TimeSpan ts = DateTime.Now - dt;
            //Debug.Print(ts.TotalMilliseconds.ToString());
        }


        MyOrder _currentOrder;
        MyOrder _focusedInOutLayGridOrder;
        //MyOrderTemplate _currentTemplate;

        bool _isValueTextEditFocused;



        ICommand _enterOrderCommand;
        ICommand _addTagCommand;
        ICommand _saveTagCommand;
        // ICommand _addReceiveCommand;
        //   ICommand _saveReceiveCommand;
        ICommand _saveNotSavedTagsInBaseCommand;
        ICommand _changeCurrentOrderDateCommand;
        ICommand _createDateCollectionCommand;
        ICommand _createOrderTemplateCommand;
        ICommand _createGroupCollectionCommand;


        MyTag _currentTag;
        AddTagWindow addtgwnd;
        // AddReceiveWindow addrcvwnd;

        DateTime _currentDate;



        public MyTag CurrentTag {
            get { return _currentTag; }
            set { _currentTag = value; }
        }
        public MyOrder CurrentOrder {
            get { return _currentOrder; }
            set {
                _currentOrder = value;
                RaisePropertyChanged();
            }
        }
        public MyOrder ReceiveOrder { get; set; }
        public MyOrder FocusedInOutLayGridOrder {
            get { return _focusedInOutLayGridOrder; }
            set {
                _focusedInOutLayGridOrder = value;
                RaisePropertyChanged();
            }
        }
        //public MyOrderTemplate CurrentTemplate {
        //    get { return _currentTemplate; }
        //    set {
        //        _currentTemplate = value;
        //        //  Debug.Print(value.Name);
        //        CurrentOrder.ParentTag = value.ParentTag;
        //        CurrentOrder.Source = value.Source;
        //        CurrentOrder.Value = value.Value;
        //    }
        //}
        public bool IsValueTextEditFocused {
            get { return _isValueTextEditFocused; }
            set {
                _isValueTextEditFocused = value;
                RaisePropertyChanged();
            }
        }
        public DateTime CurrentDate {
            get { return _currentDate; }
            set {
                _currentDate = value;
                CurrentOrder.DateOrder = value;
                RaisePropertyChanged();

            }
        }

        public int? SelectedItemsSumAll {
            get {
                return SelectedOrders.Sum(x => x.Value);
            }
        }
        public int? SelectedItemsSumEat {
            get {
                return SelectedOrders.Where(x=>x.ParentTag==1).Sum(x => x.Value);
            }
        }
        public int? SelectedItemsSumCard {
            get {
                return SelectedOrders.Where(x => x.Source == 3).Sum(x => x.Value);
            }
        }





        public ICommand SaveTagCommand {
            get {
                if (_saveTagCommand == null)
                    _saveTagCommand = new DelegateCommand(SaveTag);
                return _saveTagCommand;
            }
        }
        public ICommand EnterOrderCommand {
            get {
                if (_enterOrderCommand == null)
                    _enterOrderCommand = new DelegateCommand(EnterOrder);
                return _enterOrderCommand;
            }
        }
        public ICommand AddTagCommand {
            get {
                if (_addTagCommand == null)
                    _addTagCommand = new DelegateCommand(AddTag);
                return _addTagCommand;
            }
        }
        //public ICommand AddReceive {
        //    get {
        //        if (_addReceiveCommand == null)
        //            _addReceiveCommand = new DelegateCommand(ShowAddReceiveWindow);
        //        return _addReceiveCommand;
        //    }
        //}
        //public ICommand SaveReceive {
        //    get {
        //        if (_saveReceiveCommand == null)
        //            _saveReceiveCommand = new DelegateCommand(SaveReceiveMethod);
        //        return _saveReceiveCommand;
        //    }
        //}
        public ICommand SaveNotSavedOrdersInBaseCommand {
            get {
                if (_saveNotSavedTagsInBaseCommand == null)
                    _saveNotSavedTagsInBaseCommand = new DelegateCommand(SaveNotSavedOrdersInBaseMehtod);
                return _saveNotSavedTagsInBaseCommand;
            }
        }
        public ICommand ChangeCurrentOrderDate {
            get {
                if (_changeCurrentOrderDateCommand == null)
                    _changeCurrentOrderDateCommand = new DelegateCommand<string>(ChangeCurrentOrderDateMethod, true);
                return _changeCurrentOrderDateCommand;
            }
        }
        public ICommand CreateDateCollectionCommand {
            get {
                if (_createDateCollectionCommand == null)
                    _createDateCollectionCommand = new DelegateCommand(CreateDateCollection);
                return _createDateCollectionCommand;
            }
        }
        public ICommand CreateGroupCollectionCommand {
            get {
                if (_createGroupCollectionCommand == null)
                   _createGroupCollectionCommand= new DelegateCommand(CreateGroupCollection);
                return _createGroupCollectionCommand;
            }

        }
        //public ICommand CreateOrderTemplateCommand {
        //    get {
        //        if (_createOrderTemplateCommand == null)
        //            _createOrderTemplateCommand = new DelegateCommand(CreateOrderTemplate);
        //        return _createOrderTemplateCommand;
        //    }
        //}


        

        //  public ObservableCollection<Tag> OutLayTags { get; set; }
        //  public ObservableCollection<Tag> ReceiptTags { get; set; }
        public static ObservableCollection<MyTag> AllTags { get; set; }
        public ObservableCollection<MyOrder> Orders { get; set; }
        public ObservableCollection<MyOrder> SelectedOrders { get; set; }

        //    public ObservableCollection<TypeOrder> OrdTypes { get; set; }
        //   public ObservableCollection<OwnerOrder> Owners { get; set; }
        public ObservableCollection<Source> Sources { get; set; }
        public ObservableCollection<DayData> DateCollection { get; set; }
        public ObservableCollection<GroupData> GroupCollection { get; set; }
      //  public ObservableCollection<MyOrderTemplate> TemplatesCollection { get; set; }

        void EnterOrder() {
            CurrentOrder.Save();
            Orders.Add(CurrentOrder);
            FocusedInOutLayGridOrder = CurrentOrder;
            CreateNewCurrentOrder();
            SetFocusOnTextEditValue();
        }
        //void ShowAddReceiveWindow() {
        //    addrcvwnd = new AddReceiveWindow();
        //    ReceiveOrder = new Order();
        //   // ReceiveOrder.OrdType = OrdTypes[1].Id;
        //    ReceiveOrder.DateOrder = DateTime.Now;
        //    addrcvwnd.DataContext = this;
        //    addrcvwnd.ShowDialog();
        //}
        //void SaveReceiveMethod() {
        //    ReceiveOrder.Save();
        //    Orders.Add(ReceiveOrder);
        //    addrcvwnd.Close();
        //}
        void SaveNotSavedOrdersInBaseMehtod() {
            var list = Orders.Where(x => x.IsSavedInBase == false);
            // for (int i = 0; i < list.Count; i++) {
            foreach (MyOrder ord in list) {
                // if (!Orders[i].IsSavedInBase)
                ord.Save();
            }
        }

        void ChangeCurrentOrderDateMethod(string st) {
            if (st == "Up")
                // CurrentOrder.DateOrder            += new TimeSpan(1, 0, 0, 0);
                CurrentDate += new TimeSpan(1, 0, 0, 0);
            if (st == "Down")
                // CurrentOrder.DateOrder -= new TimeSpan(1, 0, 0, 0); ;
                CurrentDate -= new TimeSpan(1, 0, 0, 0);
        }
        void AddTag() {
            addtgwnd = new AddTagWindow();
            addtgwnd.DataContext = this;
            CurrentTag = new MyTag();
            //   CurrentTag.TagType = OrdTypes[0].Id;
            addtgwnd.ShowDialog();
        }
        void SaveTag() {
            CurrentTag.Save();
            //  OutLayTags.Add(CurrentTag);
            AllTags.Add(CurrentTag);
            CurrentOrder.ParentTag = CurrentTag.Id;
            addtgwnd.Close();
        }
        void UpdateTags() {
        

            var v = generalEntity.Tags.Select(x => new MyTag() { parentTagEntity = x }).ToList();
            AllTags = new ObservableCollection<MyTag>(v);
            //DataTable tbl = MsSqlConnector.GetTable("select * from tags");
            
            //for (int i = 0; i < tbl.Rows.Count; i++) {
            //    AllTags.Add(new MyTag(tbl.Rows[i]));
            //}
            // OutLayTags = new ObservableCollection<Tag>();
            // tbl = MsSqlConnector.GetTable("select * from tags where TagType=1");
            //for (int i = 0; i < tbl.Rows.Count; i++) {
            //    OutLayTags.Add(new Tag(tbl.Rows[i]));
            //}
            //ReceiptTags = new ObservableCollection<Tag>();
            //tbl = MsSqlConnector.GetTable("select * from Tags where TagType=2");
            //for (int i = 0; i < tbl.Rows.Count; i++) {жз

            //            OutLayTags.Add(AllTags[i]);
            //            break;
            //        case 2:
            //            ReceiptTags.Add(AllTags[i]);
            //            break;
            //    }
            //    //if (AllTags[i].TagType==1)
            //    //    OutLayTags.Add(AllTags[i]);
            //    //if (AllTags[i].TagType == 2)
            //    //    OutLayTags.Add(AllTags[i]);
            //}


        }

        void UpdateOrders() {
         
            SelectedOrders = new ObservableCollection<MyOrder>();
            SelectedOrders.CollectionChanged += SelectedOrders_CollectionChanged;

            var v = generalEntity.Orders.Select(x => new MyOrder() { parentOrderEntity = x }).ToList();
            Orders = new ObservableCollection<MyOrder>(v);
            //Orders = generalEntity.Orders.ToList();
            //DataTable tbl = MsSqlConnector.GetTable("select * from orders order by dateorder");
            //for (int i = 0; i < tbl.Rows.Count; i++) {
            //    Orders.Add(new MyOrder(tbl.Rows[i]));

            //}
        }

        void SelectedOrders_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) {
            RaisePropertyChanged("SelectedItemsSumAll");
            RaisePropertyChanged("SelectedItemsSumEat");
            RaisePropertyChanged("SelectedItemsSumCard");
        }

        void MakeLists() {

            var tmpSources = generalEntity.Sources.ToList();
            Sources = new ObservableCollection<Source>(tmpSources);
            //DataTable tbl = MsSqlConnector.GetTable("Select * from sources order by id");
            //for (int i = 0; i < tbl.Rows.Count; i++)
            //    Sources.Add(new SourceOrder(tbl.Rows[i]));

          //  TemplatesCollection = new ObservableCollection<MyOrderTemplate>();
            //tbl = MsSqlConnector.GetTable("Select * from OrderTemplates order by id");
            //for (int i = 0; i < tbl.Rows.Count; i++)
            //    TemplatesCollection.Add(new MyOrderTemplate(tbl.Rows[i]));

            //OrdTypes = new ObservableCollection<string>();
            //OrdTypes.Add("OutLay");
            //OrdTypes.Add("Receipt");

            //Owners = new ObservableCollection<string>();
            //Owners.Add("Andrew");
            //Owners.Add("Nina");


            //Sources = new ObservableCollection<string>();
            //Sources.Add("CashAnd");
            //Sources.Add("SberGoldAnd");
            //Sources.Add("Sber9055And");
            //Sources.Add(
        }
        void CreateNewCurrentOrder() {
            CurrentOrder = new MyOrder();

            CurrentOrder.DateOrder = CurrentDate; ;
            //  CurrentOrder.OrdType = OrdTypes[0].Id;
            // CurrentOrder.Owner = Owners[0].Id;
            CurrentOrder.Source = Sources[0].Id;
            CurrentOrder.ParentTag = AllTags[0].Id;
        }

        void CreateDateCollection() {
            DateTime dt = DateTime.Now;
            DateCollection.Clear();
            DateTime? tmpDate = Orders.Min(x => x.DateOrder);
            //int eatValue;
            //int sumValue;

            var OrdersWithoutIgnore = Orders.Where(x => x.Ignore == false).ToList();

            //var groupList = OrdersWithoutIgnore.GroupBy(x => x.DateOrder).Select(b => b.Sum(item => item.Value)).ToList();
            // var groupList = OrdersWithoutIgnore.GroupBy(x => x.DateOrder).Select(new{})
            var sumAll = OrdersWithoutIgnore.GroupBy(s => s.DateOrder).Select(g => new { mid = g.Key, mall = g.Sum(s => s.Value) }).ToList();
            var sumEat = Orders.Where(x => x.Ignore == false && x.ParentTag == 1).GroupBy(s => s.DateOrder).Select(g => new { mid = g.Key, mall = g.Sum(s => s.Value) }).ToList();

            DateTime tmpDateFinish = DateTime.Today;
            var dates = Enumerable.Range(0, 1 + tmpDateFinish.Subtract(tmpDate.Value).Days).Select(offset => tmpDate.Value.AddDays(offset)).ToList();

            var summall = (from sAll in sumAll
                           join sEat in sumEat
                           on sAll.mid equals sEat.mid
                           into t
                           from rt in t.DefaultIfEmpty(new { mid =DateTime.Today, mall = 0 })

                           select new {
                               date = sAll.mid,
                               sumofall = sAll.mall,
                               sumofeat = rt.mall
                           })
                               .ToList();

            // var sumall2 = sumAll.Join( // посмотреть еще
            //     sumEat,
            // p => p.mid,
            // a => a.mid,
            // (p, a) => p
            //).DefaultIfEmpty(new { mid = DateTime.Today, mall = 0 })
            //.Select(r => new {
            //    idt = r.mid,
            //    isa=r.mall


            //})
            // .ToList();






            DateCollection = new ObservableCollection<DayData>((from pd in dates join od in summall on
                                          pd.Date equals od.date
                                          into t
                                                                from rt in t.DefaultIfEmpty(new { date = DateTime.Today, sumofall = 0, sumofeat = 0 })
                                                                orderby pd.Date
                                                                select new DayData(pd.Date) {
                                                                    SumAll = rt.sumofall,
                                                                    SumOfEat = rt.sumofeat
                                                                }
                                        ).ToList());
            RaisePropertyChanged("DateCollection");



            //while (tmpDate <= DateTime.Today) {
            //   // eatValue=Orders.Sum(x=>x.
            //    //var v = from order in Orders
            //    //        where (order.DateOrder == minDate && order.ParentTag == 1)
            //    //        select order.Value;

            //  // eatValue = Orders.Where(x => x.DateOrder == tmpDate && x.ParentTag == 1&&x.Ignore==false).Sum(x => x.Value);
            // //   sumValue = Orders.Where(x => x.DateOrder == tmpDate&&x.Ignore==false).Sum(x => x.Value);
            //    //eatValue = (int)sumEat.Where(x => x.mid == tmpDate).DefaultIfEmpty(new { mid = 0, mall = 0 }).FirstOrDefault().mall;
            //    eatValue = sumEat.Where(x => x.mid == tmpDate).DefaultIfEmpty(new { mid = DateTime.Now, mall = 0 }).FirstOrDefault().mall;
            //    sumValue = (int)sumAll.Where(x => x.mid == tmpDate).DefaultIfEmpty(new { mid = DateTime.Now, mall = 0 }).FirstOrDefault().mall;

            //    DateCollection.Add(new DayData(tmpDate) { SumOfEat = eatValue ,SumAll=sumValue});
            //   // Debug.Print(minDate.ToShortDateString() + " -  "+  v1.ToString());
            //    tmpDate += new TimeSpan(1, 0, 0, 0);
            //}
            TimeSpan ts = DateTime.Now - dt;
            Debug.Print(ts.TotalMilliseconds.ToString());
            //var v = from order in Orders
            //        where (myWord.InExam == true && myWord.ID == 9)
            //        select myWord;
        }

        public void CreateGroupCollection() {
            

            var v = generalEntity.Orders.GroupBy(x => x.Tag).Select(y => new GroupData{ ParentTag = y.Key.TagName, Value = y.Sum(x => x.Value.Value) }).ToList();
            GroupCollection = new ObservableCollection<GroupData>(v);
            RaisePropertyChanged("GroupCollection");
            Debug.Print(v.ToString());
        }
        //void CreateOrderTemplate() {
        //    MyOrderTemplate ordTemplate = new MyOrderTemplate(CurrentOrder);
        //    ordTemplate.Save();
        //    TemplatesCollection.Add(ordTemplate);

        //}

        void SetFocusOnTextEditValue() {
            IsValueTextEditFocused = !IsValueTextEditFocused;
        }

        private static void ConnectToDataBase() {
   
            string machineName = System.Environment.MachineName;
            if (machineName == "KOZHEVNIKOV-W8") {
                generalEntity = new BudgetEntities1("BudgetEntitiesWork");
            } else {
                generalEntity = new BudgetEntities1("BudgetEntitiesHome");
            }
            //if (IsTestMode) {
            //    if (machineName == "KOZHEVNIKOV-W8")
            //        generalEntity = new BudgetEntities1("EngBaseEntitiesWorkTest");
            //    else
            //        generalEntity = new BudgetEntities1("EngBaseEntitiesHome");
            //}
        }

    }

    class simpleDT {
        DateTime? dt;
        int value;


    }

    
    public class ConverterForParentTags : MarkupExtension, IValueConverter {
        public ConverterForParentTags() { }
        public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) {
            ComboBoxEdit cmb = value as ComboBoxEdit;
            if (value != null) {
                string st = OrderViewModel.AllTags.Where(x => x.Id == (int)value).First().TagName;
                return st;
            }
            //  Debug.Print(value.ToString());
            //cmb.IsEnabled;
            return value;
        }

        public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) {
            throw new NotImplementedException();
        }



        public override object ProvideValue(IServiceProvider serviceProvider) {
            return this;
        }
    }

   

    public static class FocusExtension {
        public static bool GetIsFocused(DependencyObject obj) {
            return (bool)obj.GetValue(IsFocusedProperty);
        }


        public static void SetIsFocused(DependencyObject obj, bool value) {
            obj.SetValue(IsFocusedProperty, value);
        }


        public static readonly DependencyProperty IsFocusedProperty =
            DependencyProperty.RegisterAttached(
             "IsFocused", typeof(bool), typeof(FocusExtension),
             new UIPropertyMetadata(false, OnIsFocusedPropertyChanged));


        private static void OnIsFocusedPropertyChanged(DependencyObject d,
            DependencyPropertyChangedEventArgs e) {
            var uie = (UIElement)d;
            //  if ((bool)e.NewValue) {
            uie.Focus(); // Don't care about false values.
            // }
        }
    }
}
